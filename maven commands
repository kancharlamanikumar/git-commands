Dependency management:  

     suppose in parent maven pom.xml they will mention as 
     <dependencyManagement>
      <dependencies>
        <dependency>
          <groupId>javax.servlet</groupId>
          <artifactId>servlet-api</artifactId>
          <version>2.5</version>
        </dependency>
        <dependency>
          <groupId>junit</groupId>
          <artifactId>junit</artifactId>
          <version>3.8.1</version>
          <scope>test</scope>
        </dependency>
        </dependencyManagement>
        
        
        But coming to child pom we will mention as 
        
          <dependencies>
        <dependency>
          <groupId>javax.servlet</groupId>
          <artifactId>servlet-api</artifactId>
        </dependency>
        
        so they will not mention version tag.....so the version will manage centerally that is call dependency management
        
        ====================================================
        
        Transtive dependency:
        
        suppose while ececuting the goal it will download all dependcy plugins so by that the war file size will increase...so what they will do is 
        in order to avoid and i do not want to download unuseful dependices in order to decrease the war file
        
        so what they will do is 
        
        <exclusions>
                <exclusion>
                  <groupId>org.sonatype.sisu</groupId>
                  <artifactId>sisu-guice</artifactId>
                </exclusion>
            </exclusions>
            
            so by doing this while downloaded dependcies it will exclude this dependency and war file was generated
            
            ====================================================
            
            mvn help:effective-pom -Doutput=pom_eff.xml --> gives effective pom
            
           this is to generate super pom that is while writing maven the will mention one pom(super pom) in that they will mention the maven path and where to store 
           war file everything they will mention in this pom
           
           
          The Super POM is Maven’s default POM. All POMs inherit from a parent or default (despite explicitly defined or not). This base POM is known as the Super POM, and contains values inherited by default.
          Maven use the effective POM (configuration from super pom plus project configuration) to execute relevant goal. It helps developers to specify minimum configuration detail in his/her pom.xml. Although configurations can be overridden easily.

          mvn help:effective-pom -Doutput=pom_eff.xml or mvn help:effective-pom 

           
           =======================================================
           
           
           mvn dependency:tree --> it will show all dependency tree
           
           ========================================================
           
           Deploy : copying artifacts to central repo(nexus)
           
           ========================================================
           
           
           mvn help:evaluate -Dexpression="project.artifactId" | grep -V [info] | grep -v down------to get artifact id
           
           =========================================================
           
           profiles:
           ===========
           What is Build Profile?
A Build profile is a set of configuration values, which can be used to set or override default values of Maven build. Using a build profile, you can customize build for different environments such as Production v/s Development environments.

Profiles are specified in pom.xml file using its activeProfiles/profiles elements and are triggered in variety of ways. Profiles modify the POM at build time, and are used to give parameters different target environments (for example, the path of the database server in the development, testing, and production environments).

Types of Build Profile
Build profiles are majorly of three types.

Type	Where it is defined:

Per Project	Defined in the project POM file, pom.xml
Per User	     Defined in Maven settings xml file (%USER_HOME%/.m2/settings.xml)
Global	     Defined in Maven global settings xml file (%M2_HOME%/conf/settings.xml)

if u mention  <activeProfiles>
      <activeProfile>test</activeProfile>
   </activeProfiles>
   
   By default test mention will execute eventhough if u do not mention -P in the goal
   because we set profile as default
   
   
   <profiles>
    		<profile>
    			<id>rel</id>
    			<modules>
    				<module>***********</module>
    				<module>***********</module> 
    			</modules>
           	<id>dev</id>
		    <modules>
			    	<module>**********</module>
			    	<module>**********</module>
    			</modules>
    			<activation>
            		<activeByDefault>true</activeByDefault>
        		</activation>     
    		</profile>
		<profile>
          
          By defalut if u execute any goal dev profile will execute because we set as bedefalut
          if u want to execute rel profile mvn goal -p rel then only release profile will execute
=========================================================================================================
           
           
           
           
        
